Please explain:

1. Why NullPointerException is occurred in case of execute "testGet2" method ?
2. Why test method "testPut2" is failed ?
3. Why test method "testPut3" is failed ?
4. Do you know another implementations of Singlton pattern and what implementation is faster and what is the difference?

ACTUAL: 
	1. Double Checked Locking using volatile 
		+ Ленивая инициализация
		+ Высокая производительность
		- Поддерживается только с JDK 1.5 [5]	
EXPECTED: 
	2. Synchronized Acessor 
		+ Ленивая инициализация
		- Низкая производительность (критическая секция) в наиболее типичном доступе
	3. On Demand Holder 
		+ Ленивая инициализация
		+ Высокая производительность
		- Невозможно использовать для не статических полей класса	

5. What is the "volatile" keyword and how it works in case when we have a few  variables ( that shared for read/write between concurrent threads ) 
   and only one of them is marked as "volatile" ?
   Please make "volatile" only one of variables and change order of reading and writing in proper way.

ACTUAL:
 public class MyClass {
    private int years;
    private int months
    private int days;

    public int totalDays() {
        int total = this.days;
        total += months * 30;
        total += years * 365;
        return total;
    }

    public void update(int years, int months, int days){
        this.days   = days;
		this.months = months;
		this.years  = years;
    }
}


EXPECTED:
 public class MyClass {
    private int years;
    private int months
    private volatile int days;

    public int totalDays() {
        int total = this.days;
        total += months * 30;
        total += years * 365;
        return total;
    }

    public void update(int years, int months, int days){
        this.years  = years;
        this.months = months;
        this.days   = days;
    }
}

https://jenkov.com/tutorials/java-concurrency/volatile.html

The udpate() method writes three variables, of which only days is volatile.

The full volatile visibility guarantee means, that when a value is written to days, 
then all variables visible to the thread are also written to main memory. 
That means, that when a value is written to days, the values of years and months are also written to main memory.

When reading the values of years, months and days you could do it like this:

Notice the totalDays() method starts by reading the value of days into the total variable. 
When reading the value of days, the values of months and years are also read into main memory. 
Therefore you are guaranteed to see the latest values of days, months and years with the above read sequence.
